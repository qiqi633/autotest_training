{"status": "broken", "attachments": [{"source": "8d8e0b10-eb92-49d9-bf27-784dc6165f4c-attachment.txt", "type": "text/plain", "name": "log"}, {"source": "b3d67fe3-7216-47eb-8647-a01132da6290-attachment.txt", "type": "text/plain", "name": "stdout"}, {"source": "4de9d691-05e3-47f6-8084-1cc4511ff520-attachment.txt", "type": "text/plain", "name": "stderr"}], "parameters": [{"name": "testcase", "value": "'wrong_username'"}, {"name": "params", "value": "{'j_password': '0117151026imok', 'j_username': 'qiqi123', 'from': '/', 'Submit': 'Sign in'}"}], "labels": [{"name": "parentSuite", "value": "Interface test"}, {"name": "suite", "value": "jenkins_login"}, {"name": "subSuite", "value": "Post_jenkins"}, {"name": "host", "value": "windows10"}, {"name": "thread", "value": "35120-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython2"}, {"name": "package", "value": "Interface test.jenkins_login"}], "stop": 1552138434498, "uuid": "71856658-5740-44e2-a88d-21614da555e8", "historyId": "3e2894e1ed855608ea4f2c014a8514a9", "start": 1552138434444, "fullName": "Interface test.jenkins_login.Post_jenkins#post_send[wrong_username-{'j_password': '0117151026imo...]", "statusDetails": {"message": "TypeError: <Response [401]> is not JSON serializable", "trace": "self = <jenkins_login.Post_jenkins instance at 0x04775E68>\ntestcase = 'wrong_username'\nparams = {'Submit': 'Sign in', 'from': '/', 'j_password': '0117151026imok', 'j_username': 'qiqi123'}\n\n    @pytest.mark.parametrize('testcase, params',get_dir_para())\n    def post_send(self,testcase,params):\n        p_send = requests.post(self.url,params)\n        with io.open('./jenkins_test_result.json','a+') as f:\n>           json.dump(p_send,f)\n\njenkins_login.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nc:\\python27\\lib\\json\\__init__.py:189: in dump\n    for chunk in iterable:\nc:\\python27\\lib\\json\\encoder.py:442: in _iterencode\n    o = _default(o)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x03DE3110>, o = <Response [401]>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(repr(o) + \" is not JSON serializable\")\nE       TypeError: <Response [401]> is not JSON serializable\n\nc:\\python27\\lib\\json\\encoder.py:184: TypeError"}, "name": "post_send[wrong_username-{'j_password': '0117151026imo...]"}